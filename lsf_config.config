params {
    // inputs
    imgs_dir = null
    img_path = null
    imgs_and_masks_tsv = null

    // fastLBP threads
    ncpus = 15
    cache_lbp_results = false

    // annotations
    annot_suffix = 'annotation'
    annot_legend_path = null

    // metrics
    all_pairs_csv = 'all_pairs_jacc.csv'
    pairs_max_csv = 'pairs_max_jacc.csv'

    mask = null
    background_color = null // TODO: explicitly use separate parameters for different modes (Otsu and Provided mask)
    debug_flag = true
    outdir = "${System.getProperty("user.dir")}/outdir"

    args_tsv = null
    args = [:]
    constargs = [:]

    plots_backend = 'matplotlib'
}


profiles {
    conda {
        conda.enabled = true
        process.conda = "${projectDir}/envs/environment.yaml"
    }
    mamba {
        conda.enabled = true
        conda.useMamba = true
        process.conda = "${projectDir}/envs/environment.yaml"
    }
}



singularity.enabled = false
docker.enabled = false

// Executor details
executor {
    name = 'lsf'
    perJobMemLimit = true
    poolSize = 4
    submitRateLimit = '5 sec'
    killBatchSize = 50
}

process {
    executor = 'lsf'
    queue = 'normal'
}


process {

    cpus = 10
    memory = 20.GB

    withName : 'fastlbp' {
        cpus = { params.ncpus * task.attempt }
        memory = { 20.GB * task.attempt }
    }
}

// TODO: DEBUG: check_max() doesn't work for the 'fastlbp' process for some reason.
// The memory parameter is not set for the LSF job which can be seen in logs.
// At the same time, the `cpus` parameter seems to be set correctly

// Function to ensure that resource requirements don't go beyond
// a maximum limit

// Taken from
// https://github.com/BioinfoTongLI/workflow-registration/blob/main/conf/lsf.config
// https://github.com/nextflow-io/nextflow/issues/640
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}